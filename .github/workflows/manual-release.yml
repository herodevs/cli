name: Manual Release
run-name: Release ${{ github.ref_name }} (pushed by ${{ github.actor }})${{ inputs.dry-run == true && ' --dry-run' || '' }}

on:
  workflow_dispatch:
    inputs:
      channel:
        description: 'NPM tag to publish to'
        type: choice
        options:
          - beta
          - alpha
          - latest
          - next
        default: beta
      dry-run:
        description: 'Dry run the release'
        type: boolean
        default: false
permissions:
  contents: read

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.version.outputs.version }}
  build-binaries:
    strategy:
      matrix:
        include:
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
          - os: macos-14
            target: aarch64-apple-darwin
            code-target: darwin-arm64
    name: Build ${{ matrix.code-target }} binaries
    runs-on: ${{ matrix.os }}
    needs: check
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version-file: '.nvmrc'
      - name: Install linux toolchain
        if: matrix.code-target == 'linux-x64'
        run: |
          sudo apt install nsis p7zip-full p7zip-rar -y
      - name: Install win32 toolchain
        if: matrix.code-target == 'win32-x64'
        run: |
          choco install 7zip nsis grep -y
          echo "C:\Program Files (x86)\GnuWin32\bin" >> $GITHUB_PATH
      - name: Install npm dependencies
        run: npm ci
      - name: Build binaries (Windows)
        if: matrix.code-target == 'win32-x64'
        shell: pwsh
        run: npx oclif pack win --targets=win32-x64 --no-xz
      - name: Build binaries (Linux)
        if: matrix.code-target == 'linux-x64'
        shell: bash
        run: npx oclif pack tarballs --targets=linux-x64 --no-xz
      - name: Build binaries (macOS)
        if: matrix.code-target == 'darwin-arm64'
        shell: bash
        run: npx oclif pack tarballs --targets=darwin-arm64 --no-xz
      - name: Upload binary artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: cli-binaries-${{ matrix.code-target }}
          path: dist/hd-*
          if-no-files-found: error
  release:
    runs-on: ubuntu-latest
    needs: [check, build-binaries]
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci
      - run: npm run build
      - run: npm test
      - run: npm run test:e2e
      - name: Create NPM release
        run: npm publish --tag ${{ inputs.channel }} --provenance --access public ${{ inputs.dry-run == true && '--dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.HD_CLI_NPM_TOKEN }}
      - name: Create Git Tag
        if: ${{ !inputs.dry-run }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a v${{ needs.check.outputs.version }} -m "Release v${{ needs.check.outputs.version }}"
          git push origin v${{ needs.check.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        if: ${{ !inputs.dry-run }}
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          tag_name: v${{ needs.check.outputs.version }}
          name: Release v${{ needs.check.outputs.version }} ${{ inputs.channel == 'latest' && 'Latest' || inputs.channel }}
          body: |
            ## Changes
            
            This release includes the following platform-specific binaries:
            - macOS (ARM64)
            - Windows (x64)
            - Linux (x64)
          draft: false
          prerelease: ${{ inputs.channel != 'latest' }}
          discussion_category_name: Announcements
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download CLI artifacts
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          pattern: 'cli-binaries-*'
          path: artifacts
          merge-multiple: true
      - name: Upload Release Assets (Windows)
        if: ${{ !inputs.dry-run }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/hd-v${{ needs.check.outputs.version }}-*-win32-x64.tar.gz
          asset_name: hdcli-win32-x64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Assets (Linux)
        if: ${{ !inputs.dry-run }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/hd-v${{ needs.check.outputs.version }}-*-linux-x64.tar.gz
          asset_name: hdcli-linux-x64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Assets (macOS)
        if: ${{ !inputs.dry-run }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/hd-v${{ needs.check.outputs.version }}-*-darwin-arm64.tar.gz
          asset_name: hdcli-darwin-arm64.tar.gz
          asset_content_type: application/gzip
